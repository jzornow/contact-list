require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/contacts", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Contact. As you add validations to Contact, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { 
      first_name: 'Micki',
      last_name: 'Balder',
      phone_number: '6176661234'
    } 
  }

  let(:invalid_attributes) {
    {
      first_name: 'Mi3ki',
      last_name: 'B@lder',
      phone_number: '(617)699-1465'
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Contact.create! valid_attributes
      get contacts_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      contact = Contact.create! valid_attributes
      get contact_url(contact)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_contact_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      contact = Contact.create! valid_attributes
      get edit_contact_url(contact)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Contact" do
        expect {
          post contacts_url, params: { contact: valid_attributes }
        }.to change(Contact, :count).by(1)
      end

      it "redirects to the created contact" do
        post contacts_url, params: { contact: valid_attributes }
        expect(response).to redirect_to(contact_url(Contact.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Contact" do
        expect {
          post contacts_url, params: { contact: invalid_attributes }
        }.to change(Contact, :count).by(0)
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post contacts_url, params: { contact: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          first_name: 'Judy',
          last_name: 'Bloom',
          phone_number: '9991234567'
        }
      }

      it "updates the requested contact" do
        contact = Contact.create! valid_attributes
        patch contact_url(contact), params: { contact: new_attributes }
        contact.reload
        expect(contact.phone_number).to eq('9991234567')
        expect(contact.first_name).to eq('Judy')
        expect(contact.last_name).to eq('Bloom')
      end

      it "redirects to the contact" do
        contact = Contact.create! valid_attributes
        patch contact_url(contact), params: { contact: new_attributes }
        contact.reload
        expect(response).to redirect_to(contact_url(contact))
      end
    end

    context "with invalid parameters" do
    
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        contact = Contact.create! valid_attributes
        patch contact_url(contact), params: { contact: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested contact" do
      contact = Contact.create! valid_attributes
      expect {
        delete contact_url(contact)
      }.to change(Contact, :count).by(-1)
    end

    it "redirects to the contacts list" do
      contact = Contact.create! valid_attributes
      delete contact_url(contact)
      expect(response).to redirect_to(contacts_url)
    end
  end
end
